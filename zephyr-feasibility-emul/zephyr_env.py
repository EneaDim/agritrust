import os
import argparse
import re
from colorama import init, Fore

init(autoreset=True)

def validate_cmake_version(version):
    if not re.match(r"^\d+\.\d+(\.\d+)?$", version):
        raise ValueError("Invalid CMake version format. Use something like '3.20.0'")
    return version

def write_file(path, content, overwrite=False):
    if os.path.exists(path) and not overwrite:
        print(Fore.YELLOW + f"Skipped existing: {path}")
        return
    with open(path, "w") as f:
        f.write(content)
    print(Fore.GREEN + f"Generated: {path}")

def generate_project(
    project_name,
    cmake_version,
    language,
    output_folder,
    board,
    overlay,
    overwrite=False
):
    cmake_version = cmake_version or "3.20.0"
    language = language or "C"
    board = board or "qemu_riscv64"
    overlay = overlay or "app"

    try:
        validate_cmake_version(cmake_version)
    except ValueError as e:
        print(Fore.RED + str(e))
        return

    os.makedirs(output_folder, exist_ok=True)

    # CMakeLists.txt
    cmake_content = f"""# Minimum CMake version required
cmake_minimum_required(VERSION {cmake_version})

# Include Zephyr
find_package(Zephyr REQUIRED HINTS $ENV{{ZEPHYR_BASE}})

# Define project
project(
  {project_name}
  VERSION 1.0
  DESCRIPTION "Zephyr project generated by script"
  LANGUAGES {language}
)

# Add main source file
target_sources(app PRIVATE src/main.c)

# Optional: Add include directories
# target_include_directories(app PRIVATE include)

# Optional: Add additional sources
# target_sources(app PRIVATE src/utils.c src/device.c)

# Optional: Add libraries
# target_link_libraries(app PRIVATE my_custom_lib)

# Optional: Define compile definitions
# target_compile_definitions(app PRIVATE MY_MACRO=1)

# Optional: Compiler options
# target_compile_options(app PRIVATE -Wall -Werror)
"""
    write_file(os.path.join(output_folder, "CMakeLists.txt"), cmake_content, overwrite)

    # Makefile
    makefile_content = f"""BOARD   ?= {board}
OVERLAY ?= {overlay}

ORANGE  :=\\033[38;5;214m
RESET   :=\\033[0m

all: config build run

config:
\tcmake -S . -B build -DBOARD=$(BOARD) -DDTC_OVERLAY_FILE=boards/$(OVERLAY).overlay

menuconfig: config
\tcmake --build build --target menuconfig

build:
\tcmake --build build

run:
\tcmake --build build --target run

clean:
\trm -rf build

west-build:
\twest build -p always -b $(BOARD) -- -DDTC_OVERLAY_FILE=boards/$(OVERLAY).overlay

west-run:
\twest build -t run

help:
\t@echo "$(ORANGE)"
\t@echo "Makefile targets:"
\t@echo ""
\t@echo "all         Run config, build, and run"
\t@echo "config      Configure the build with CMake"
\t@echo "menuconfig  Run menuconfig (interactive config)"
\t@echo "build       Build using CMake"
\t@echo "run         Run using CMake"
\t@echo "west-build  Build using west (recommended)"
\t@echo "west-run    Run using west (if supported)"
\t@echo "clean       Remove build directory"
\t@echo "help        Show this help message"
\t@echo "$(RESET)"
"""
    write_file(os.path.join(output_folder, "Makefile"), makefile_content, overwrite)

    # prj.conf
    write_file(os.path.join(output_folder, "prj.conf"), "# Project configuration goes here\n", overwrite)

    # One overlay file
    boards_dir = os.path.join(output_folder, "boards")
    os.makedirs(boards_dir, exist_ok=True)
    overlay_path = os.path.join(boards_dir, f"{overlay}.overlay")
    write_file(overlay_path, f"// Device tree overlay: {overlay}.overlay\n", overwrite)

    # main.c
    src_dir = os.path.join(output_folder, "src")
    os.makedirs(src_dir, exist_ok=True)
    main_c_content = """#include <zephyr/kernel.h>

// #include <zephyr/drivers/gpio.h>
// #include "my_header.h"

void main(void) {
    // Initialization here
    // Example:
    // printk("Hello, Zephyr!\\n");

    // while (1) {
    //     k_sleep(K_SECONDS(1));
    // }
}
"""
    write_file(os.path.join(src_dir, "main.c"), main_c_content, overwrite)

def main():
    parser = argparse.ArgumentParser(description="Generate a boilerplate Zephyr project structure.")
    parser.add_argument("-p", "--project_name", required=True, help="Project name")
    parser.add_argument("-v", "--c_make_version", default=None, help="CMake minimum version (default: 3.20.0)")
    parser.add_argument("-l", "--languages", default="C", help="Languages used in project (default: C)")
    parser.add_argument("-o", "--output_folder", default=".", help="Output folder (default: current directory)")
    parser.add_argument("-b", "--board", default="qemu_riscv64", help="Target board (default: qemu_riscv64)")
    parser.add_argument("-y", "--overlay", default="app", help="Overlay file name (default: app)")
    parser.add_argument("--overwrite", action="store_true", help="Overwrite existing files")

    args = parser.parse_args()

    generate_project(
        project_name=args.project_name,
        cmake_version=args.c_make_version,
        language=args.languages,
        output_folder=args.output_folder,
        board=args.board,
        overlay=args.overlay,
        overwrite=args.overwrite,
    )

if __name__ == "__main__":
    main()

